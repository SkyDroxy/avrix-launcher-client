name: Release

on:
  workflow_run:
    workflows: ["Build Avrix App"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Run ID of Build Avrix App to consume (optional)'
        required: false
      version:
        description: 'Version to release (e.g., 0.4.2 or v0.4.2) â€” optional when using run_id'
        required: false

permissions:
  contents: write

jobs:
  release:
    runs-on: windows-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    env:
      AVRIX_UPDATER_ENDPOINT: 'https://s3.storage.skymunt.com/avrix-launcher/latest.json'
      AVRIX_UPDATER_PUBKEY: 'dW50cnVzdGVkIGNvbW1lbnQ6IG1pbmlzaWduIHB1YmxpYyBrZXk6IEQ0MDZEQzhEREQwQkEwNUMKUldSY29BdmRqZHdHMUVaR1ZFZWY3ZWJ6NnZ3T3Q5SU1GRGRXSVVOLzAxVGVtMTR4c1lyYmhGeEQK'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve source run and download artifacts
        id: fetch
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: build-app.yml
          run_id: ${{ inputs.run_id || github.event.workflow_run.id }}
          name: avrix-exe
          path: installer/payload/build
          check_artifacts: true

      - name: Download NSIS bundle (optional)
        id: fetch_nsis
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: build-app.yml
          run_id: ${{ inputs.run_id || github.event.workflow_run.id }}
          name: nsis-bundle
          path: dist/nsis
          check_artifacts: false
          if_no_artifact_found: warn

      - name: Download version artifact
        id: fetch_version
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: build-app.yml
          run_id: ${{ inputs.run_id || github.event.workflow_run.id }}
          name: version
          path: .

      - name: Set NEW_VERSION from artifact or input
        shell: pwsh
        run: |
          if (Test-Path './version.txt') {
            $ver = Get-Content ./version.txt -Raw
          } elseif ('${{ inputs.version }}') {
            $ver = '${{ inputs.version }}'.TrimStart('v')
          } else {
            throw 'Missing version: provide workflow_dispatch input.version or ensure version artifact exists'
          }
          echo "NEW_VERSION=$ver" >> $env:GITHUB_ENV

      - name: Publish Build App run id for downstream
        shell: pwsh
        run: |
          $rid = "${{ inputs.run_id || github.event.workflow_run.id }}"
          Set-Content -Path build-run-id.txt -Value $rid -NoNewline -Encoding ASCII

      - name: Upload build-run-id artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-run-id
          path: build-run-id.txt

      - name: Create Git tag (manual dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git commit -am "chore: release v$env:NEW_VERSION" || echo "No changes to commit"
          git tag v$env:NEW_VERSION
          git push origin HEAD:main --follow-tags

      - name: Ensure GitHub Release exists
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = 'Stop'
          $repo = "${{ github.repository }}"
          $tag = "v$env:NEW_VERSION"
          $headers = @{ Authorization = "Bearer $env:GITHUB_TOKEN"; 'User-Agent' = 'gh-actions'; Accept = 'application/vnd.github+json' }
          try {
            $resp = Invoke-RestMethod -Method GET -Uri "https://api.github.com/repos/$repo/releases/tags/$tag" -Headers $headers
            $id = $resp.id
          } catch {
            $payload = @{ tag_name = $tag; name = "Avrix Launcher $tag"; body = "Auto-generated release for $tag"; draft = $false; prerelease = $false } | ConvertTo-Json
            $create = Invoke-RestMethod -Method POST -Uri "https://api.github.com/repos/$repo/releases" -Headers $headers -Body $payload
            $id = $create.id
          }
          if (-not $id) { throw "Failed to determine release id" }
          echo "RELEASE_ID=$id" >> $env:GITHUB_ENV

      - name: Compose tag name
        id: tagname
        shell: pwsh
        run: |
          echo "tag=v$env:NEW_VERSION" >> $env:GITHUB_OUTPUT

      - name: Attach NSIS bundle to GitHub Release (if present)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tagname.outputs.tag }}
          files: |
            dist/nsis/*.exe
            dist/nsis/*.sig
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # latest.json will be generated by the updater workflow after publishing the updater

      - name: Upload artifacts to MinIO (S3)
        shell: pwsh
        env:
          MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
        run: |
          $ErrorActionPreference = 'Stop'
          $mc = "$PWD/mc.exe"
          Invoke-WebRequest -Uri "https://dl.min.io/client/mc/release/windows-amd64/mc.exe" -OutFile $mc

          & $mc alias set s3 $env:MINIO_ENDPOINT $env:MINIO_ACCESS_KEY $env:MINIO_SECRET_KEY

          # Ensure bucket exists and is public-read
          try { & $mc mb -p s3/avrix-launcher } catch { }
          & $mc anonymous set download s3/avrix-launcher

          $ver = "$env:NEW_VERSION"
          $dest = "s3/avrix-launcher/v$ver/"
          if (Test-Path 'dist/nsis') {
            $exe = Get-ChildItem -Path 'dist/nsis' -Filter '*.exe'
            $sig = Get-ChildItem -Path 'dist/nsis' -Filter '*.sig'
            if ($exe) { $exe | ForEach-Object { & $mc cp $_.FullName $dest } }
            if ($sig) { $sig | ForEach-Object { & $mc cp $_.FullName $dest } }
          }

          # latest.json upload handled by updater workflow

      # Optional legacy Inno step removed to avoid rebuild; can be re-added to consume artifacts if needed
