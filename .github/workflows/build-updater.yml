name: Build Avrix Updater

on:
  workflow_run:
    workflows: ["Release"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Run ID of Build Avrix App to consume (optional)'
        required: false
      version:
        description: 'Version (e.g. 0.2.7) â€” optional when using run_id'
        required: false

jobs:
  build:
    runs-on: windows-latest
    env:
      NEW_VERSION: ${{ inputs.version || '' }}
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
      MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
      MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
      MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Require Release success
        if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion != 'success' }}
        run: exit 1

      - name: Download build-run-id artifact from Release
        id: get_build_run
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: release.yml
          run_id: ${{ github.event.workflow_run.id || inputs.run_id }}
          name: build-run-id
          path: .
          check_artifacts: false

      - name: Resolve Build App run id
        id: resolve_run
        shell: pwsh
        run: |
          $rid = "${{ inputs.run_id }}"
          if (-not $rid -and (Test-Path './build-run-id.txt')) { $rid = Get-Content ./build-run-id.txt -Raw }
          if (-not $rid) { throw 'Unable to resolve Build App run id. Provide inputs.run_id or ensure Release published build-run-id.' }
          echo "rid=$rid" >> $env:GITHUB_OUTPUT

      - name: Download version artifact
        id: fetch_version
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: build-app.yml
          run_id: ${{ steps.resolve_run.outputs.rid }}
          name: version
          path: .

      - name: Set NEW_VERSION from artifact or input
        shell: pwsh
        run: |
          if (Test-Path './version.txt') { $ver = Get-Content ./version.txt -Raw }
          elseif ('${{ env.NEW_VERSION }}') { $ver = '${{ env.NEW_VERSION }}' }
          else { throw 'Missing version' }
          echo "NEW_VERSION=$ver" >> $env:GITHUB_ENV

      - name: Install Inno Setup
        shell: pwsh
        run: |
          $url = 'https://jrsoftware.org/download.php/is.exe'
          Invoke-WebRequest $url -OutFile is.exe
          Start-Process .\is.exe -ArgumentList '/VERYSILENT' -Wait

      - name: Ensure payload/build exists
        shell: pwsh
        working-directory: installer
        run: |
          New-Item -ItemType Directory -Path 'payload/build' -Force | Out-Null

      - name: Download Avrix EXE artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: build-app.yml
          run_id: ${{ steps.resolve_run.outputs.rid }}
          name: avrix-exe
          path: installer/payload/build
          check_artifacts: true

      - name: Compile updater.iss
        shell: pwsh
        working-directory: installer
        run: |
          $env:NEW_VERSION = '${{ env.NEW_VERSION }}'
          & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' updater.iss

      - name: Locate output
        id: find_output
        shell: pwsh
        working-directory: installer
        run: |
          $file = Get-ChildItem -Recurse -Filter 'Avrix-Update-*.exe' | Select-Object -First 1
          if (-not $file) { throw 'Updater output not found' }
          echo "path=$($file.FullName)" >> $env:GITHUB_OUTPUT
          $sig = "$($file.FullName).sig"
          if (Test-Path $sig) { echo "sig=$sig" >> $env:GITHUB_OUTPUT }

      - name: Sign with Tauri Signer
        if: env.TAURI_SIGNING_PRIVATE_KEY != '' && env.TAURI_SIGNING_PRIVATE_KEY_PASSWORD != ''
        shell: pwsh
        run: |
          npm i -g @tauri-apps/cli
          $file = '${{ steps.find_output.outputs.path }}'
          tauri signer sign --private-key $Env:TAURI_SIGNING_PRIVATE_KEY --password $Env:TAURI_SIGNING_PRIVATE_KEY_PASSWORD --ci --file $file

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Avrix-Update-${{ env.NEW_VERSION }}
          path: |
            ${{ steps.find_output.outputs.path }}
            ${{ steps.find_output.outputs.path }}.sig

      # Optional: Upload to MinIO (S3 compatible), same style as release.yml
      - name: Upload updater to MinIO (S3)
        if: env.MINIO_ENDPOINT != '' && env.MINIO_ACCESS_KEY != '' && env.MINIO_SECRET_KEY != ''
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $mc = "$PWD/mc.exe"
          Invoke-WebRequest -Uri "https://dl.min.io/client/mc/release/windows-amd64/mc.exe" -OutFile $mc
          & $mc alias set s3 $env:MINIO_ENDPOINT $env:MINIO_ACCESS_KEY $env:MINIO_SECRET_KEY

          # Ensure bucket exists and is public-read
          try { & $mc mb -p s3/avrix-launcher } catch { }
          & $mc anonymous set download s3/avrix-launcher

          $ver = "${{ env.NEW_VERSION }}"
          $dest = "s3/avrix-launcher/v$ver/"
          & $mc cp "${{ steps.find_output.outputs.path }}" (Join-Path $dest "Avrix-Update-$ver.exe")
          if (Test-Path "${{ steps.find_output.outputs.path }}.sig") {
            & $mc cp "${{ steps.find_output.outputs.path }}.sig" (Join-Path $dest "Avrix-Update-$ver.exe.sig")
          }

      - name: Generate latest.json from updater signature
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $ver = "$env:NEW_VERSION"
          $baseUrl = "https://s3.storage.skymunt.com/avrix-launcher"
          $url = "$baseUrl/v$ver/Avrix-Update-$ver.exe"
          $sigPath = "${{ steps.find_output.outputs.path }}.sig"
          if (-not (Test-Path $sigPath)) { throw "Signature file not found for updater" }
          $sig = (Get-Content $sigPath -Raw).Trim()
          $pubDate = (Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')
          $jsonObj = [ordered]@{
            version   = $ver
            notes     = ""
            pub_date  = $pubDate
            platforms = [ordered]@{
              "windows-x86_64" = [ordered]@{
                signature = $sig
                url       = $url
              }
            }
          }
          $json = $jsonObj | ConvertTo-Json -Depth 5
          Set-Content -Path latest.json -Value $json -Encoding UTF8
          echo "LATEST_JSON_PATH=$((Resolve-Path latest.json).Path)" >> $env:GITHUB_ENV

      - name: Upload latest.json to MinIO
        if: env.MINIO_ENDPOINT != '' && env.MINIO_ACCESS_KEY != '' && env.MINIO_SECRET_KEY != ''
        shell: pwsh
        run: |
          $mc = "$PWD/mc.exe"
          if (-not (Test-Path $mc)) { Invoke-WebRequest -Uri "https://dl.min.io/client/mc/release/windows-amd64/mc.exe" -OutFile $mc }
          & $mc alias set s3 $env:MINIO_ENDPOINT $env:MINIO_ACCESS_KEY $env:MINIO_SECRET_KEY
          & $mc cp "$env:LATEST_JSON_PATH" "s3/avrix-launcher/latest.json"
